ReactDomRenderMigrator @dartfmt_output @idempotent
>>> empty file (patches 0)
<<<

>>> no matches (patches 0)
    library foo;
    var a = 'b';
    class Foo {}
<<<
    library foo;
    var a = 'b';
    class Foo {}


>>> render without usage of return value (patches 0)
    main() {
      react_dom.render(Foo()(), mountNode);
    }
<<<
    main() {
      react_dom.render(Foo()(), mountNode);
    }


>>> simple usage (patches 5)
    main() {
      var instance = react_dom.render(Foo()(), mountNode);
    }
<<<
    main() {
      // [ ] Check this box upon manual validation of this ref and its typing. This will be removed once the transition to React 16 is complete.
      var instance;
      react_dom.render((Foo()
        ..ref = (ref) { instance = ref; }
      )(), mountNode);
    }


>>> simple usage assignment to existing variable (patches 5)
    main() {
      var instance;
      instance = react_dom.render(Foo()(), mountNode);
    }
<<<
    main() {
      var instance;
      // [ ] Check this box upon manual validation of this ref. This will be removed once the transition to React 16 is complete.
      react_dom.render((Foo()
        ..ref = (ref) { instance = ref; }
      )(), mountNode);
    }


>>> simple usage w/ existing other props (patches 3)
    main() {
      var instance = react_dom.render((Foo()
        ..id = 'foo'
      )(), mountNode);
    }
<<<
    main() {
      // [ ] Check this box upon manual validation of this ref and its typing. This will be removed once the transition to React 16 is complete.
      var instance;
      react_dom.render((Foo()
        ..ref = (ref) { instance = ref; }
        ..id = 'foo'
      )(), mountNode);
    }

>>> simple usage w/ existing ref (patches 1)
    main() {
      var fooRef;
      react_dom.render((Foo()
        ..ref = (ref) { fooRef = ref; }
      )(), mountNode);
    }
<<<
    main() {
      var fooRef;
      react_dom.render((Foo()
        // [ ] Check this box upon manual validation of this ref. This will be removed once the transition to React 16 is complete.
        ..ref = (ref) { fooRef = ref; }
      )(), mountNode);
    }


>>> simple usage w/ non-component usage (patches 6)
    main() {
      var instance1 = react_dom.render(foo(), mountNode);

      var instance2 = react_dom.render(foo, mountNode);
    }
<<<
    main() {
      // [ ] Check this box upon manual validation of this ref and its typing. This will be removed once the transition to React 16 is complete.
      var instance1;
      // [ ] Check this box upon manual validation that the component rendered by this expression uses a ref safely. This will be removed once the transition to React 16 is complete.
      react_dom.render(foo(), mountNode);

      // [ ] Check this box upon manual validation of this ref and its typing. This will be removed once the transition to React 16 is complete.
      var instance2;
      // [ ] Check this box upon manual validation that the component rendered by this expression uses a ref safely. This will be removed once the transition to React 16 is complete.
      react_dom.render(foo, mountNode);
    }



>>> simple usage w/ validated ref (patches 0)
    main() {
      var fooRef;
      react_dom.render((Foo()
        // [x] Check this box upon manual validation of this ref. This will be removed once the transition to React 16 is complete.
        ..ref = (ref) { fooRef = ref; }
      )(), mountNode);
    }
<<<
    main() {
      var fooRef;
      react_dom.render((Foo()
        // [x] Check this box upon manual validation of this ref. This will be removed once the transition to React 16 is complete.
        ..ref = (ref) { fooRef = ref; }
      )(), mountNode);
    }

>>> simple usage w/ unvalidated ref (patches 0)
    main() {
      var fooRef;
      react_dom.render((Foo()
        // [ ] Check this box upon manual validation of this ref. This will be removed once the transition to React 16 is complete.
        ..ref = (ref) { fooRef = ref; }
      )(), mountNode);
    }
<<<
    main() {
      var fooRef;
      react_dom.render((Foo()
        // [ ] Check this box upon manual validation of this ref. This will be removed once the transition to React 16 is complete.
        ..ref = (ref) { fooRef = ref; }
      )(), mountNode);
    }
