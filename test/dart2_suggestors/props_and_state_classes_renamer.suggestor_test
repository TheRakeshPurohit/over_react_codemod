PropsAndStateClassesRenamer
>>> empty file (patches 0)
<<<


>>> no matches (patches 0)
library foo;
var a = 'b';
class Foo {}
<<<
library foo;
var a = 'b';
class Foo {}


>>> @Props() public (patches 1)
@Props() class Foo {}
<<<
@Props() class _$Foo {}


>>> @Props() private (patches 1)
@Props() class _Foo {}
<<<
@Props() class _$_Foo {}


>>> @Props() public already renamed (patches 0)
@Props() class _$Foo {}
<<<
@Props() class _$Foo {}


>>> @Props() private already renamed (patches 0)
@Props() class _$_Foo {}
<<<
@Props() class _$_Foo {}


>>> @State() public (patches 1)
@State() class Foo {}
<<<
@State() class _$Foo {}


>>> @State() private (patches 1)
@State() class _Foo {}
<<<
@State() class _$_Foo {}


>>> @State() public already renamed (patches 0)
@State() class _$Foo {}
<<<
@State() class _$Foo {}


>>> @State() private already renamed (patches 0)
@State() class _$_Foo {}
<<<
@State() class _$_Foo {}


>>> @AbstractProps() public (patches 1)
@AbstractProps() class Foo {}
<<<
@AbstractProps() class _$Foo {}


>>> @AbstractProps() private (patches 1)
@AbstractProps() class _Foo {}
<<<
@AbstractProps() class _$_Foo {}


>>> @AbstractProps() public already renamed (patches 0)
@AbstractProps() class _$Foo {}
<<<
@AbstractProps() class _$Foo {}


>>> @AbstractProps() private already renamed (patches 0)
@AbstractProps() class _$_Foo {}
<<<
@AbstractProps() class _$_Foo {}


>>> @AbstractState() public (patches 1)
@AbstractState() class Foo {}
<<<
@AbstractState() class _$Foo {}


>>> @AbstractState() private (patches 1)
@AbstractState() class _Foo {}
<<<
@AbstractState() class _$_Foo {}


>>> @AbstractState() public already renamed (patches 0)
@AbstractState() class _$Foo {}
<<<
@AbstractState() class _$Foo {}


>>> @AbstractState() private already renamed (patches 0)
@AbstractState() class _$_Foo {}
<<<
@AbstractState() class _$_Foo {}


>>> @PropsMixin() public (patches 1)
@PropsMixin() class Foo {}
<<<
@PropsMixin() class _$Foo {}


>>> @PropsMixin() private (patches 1)
@PropsMixin() class _Foo {}
<<<
@PropsMixin() class _$_Foo {}


>>> @PropsMixin() public already renamed (patches 0)
@PropsMixin() class _$Foo {}
<<<
@PropsMixin() class _$Foo {}


>>> @PropsMixin() private already renamed (patches 0)
@PropsMixin() class _$_Foo {}
<<<
@PropsMixin() class _$_Foo {}


>>> @StateMixin() public (patches 1)
@StateMixin() class Foo {}
<<<
@StateMixin() class _$Foo {}


>>> @StateMixin() private (patches 1)
@StateMixin() class _Foo {}
<<<
@StateMixin() class _$_Foo {}


>>> @StateMixin() public already renamed (patches 0)
@StateMixin() class _$Foo {}
<<<
@StateMixin() class _$Foo {}


>>> @StateMixin() private already renamed (patches 0)
@StateMixin() class _$_Foo {}
<<<
@StateMixin() class _$_Foo {}


>>> class with extra annotations and annotation args (patches 1)
@Bar(test: true)
@Props(keyNamespace: 'foo')
@deprecated
class Foo {}
<<<
@Bar(test: true)
@Props(keyNamespace: 'foo')
@deprecated
class _$Foo {}


>>> ignores usages with an attached `// orcm_ignore` comment (patches 0)
@Props()
// orcm_ignore
class DontRename {}
<<<
@Props()
// orcm_ignore
class DontRename {}